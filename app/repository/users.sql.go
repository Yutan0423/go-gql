// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package repository

import (
	"context"
	"database/sql"
)

const addTestUser = `-- name: AddTestUser :execresult
INSERT INTO users(id, name) VALUES 
('U_1', 'hsaki')
`

func (q *Queries) AddTestUser(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, addTestUser)
}

const fetchUser = `-- name: FetchUser :many
SELECT id, name, project_v2
FROM users
`

func (q *Queries) FetchUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, fetchUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.ProjectV2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchUserByName = `-- name: FetchUserByName :one
SELECT
  id,
  name
FROM users
WHERE name = ?
LIMIT 1
`

type FetchUserByNameRow struct {
	ID   string
	Name string
}

func (q *Queries) FetchUserByName(ctx context.Context, name string) (FetchUserByNameRow, error) {
	row := q.db.QueryRowContext(ctx, fetchUserByName, name)
	var i FetchUserByNameRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
